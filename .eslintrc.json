{
  "root": true,
  "ignorePatterns": [
    "**/*.js",
    "**.*.spec.ts",
    "coverage/**/*",
    "dist/**/*",
    "docs/**/*",
    "node_modules/**/*",
    "projects/**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json",
          "e2e/tsconfig.json"
        ],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "prettier"
      ],
      "rules": {
        "@angular-eslint/component-selector": [
          "warn",
          {
            "prefix": "app",
            "style": "kebab-case",
            "type": [
              "element",
              "attribute"
            ]
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "prefix": "app",
            "style": "camelCase",
            "type": "attribute"
          }
        ],
        // ESLint
        "@typescript-eslint/no-floating-promises": "warn",
        "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_", "varsIgnorePattern": "^_" }],
        "@typescript-eslint/consistent-type-definitions": ["warn", "interface"],
        "@typescript-eslint/no-empty-function": "warn",
        "@typescript-eslint/ban-types": "warn",
        "@typescript-eslint/no-this-alias": "warn",
        // Unfortunately this flags every single void method not marked as void
        "@typescript-eslint/explicit-module-boundary-types": "off",
        // This one causes almost every file to error due to "standalone: false: which isn't recommended in Angular 19
        // Fixing it should be on the cards, but it's a nightmare to unravel
        "@angular-eslint/prefer-standalone": "off",
        // Formatting
        "no-trailing-spaces": "error",
        "no-multi-spaces": "error",
        "eol-last": ["error", "always"],
        "space-in-parens": ["error", "never"],
        "object-curly-spacing": ["error", "always"],
        "complexity": ["warn", 20],
        "max-lines": ["warn", 1000],
        "max-params": ["warn", 8],
        "no-var": "warn",
        "no-console": "off",    // Allow console output
        "prefer-const": "warn",
        // Downgrade errors to warnings
        "@typescript-eslint/restrict-plus-operands": "warn",
        // Too many warnings on these next ones, perhaps we may want to revisit later
        "@typescript-eslint/no-explicit-any": "off", // Unsafe return of an `any` typed value
        "@typescript-eslint/no-unsafe-member-access": "off", // Unsafe member access .loaded on an `any` value
        "@typescript-eslint/no-unsafe-return": "off", // Unsafe return of an `any` typed value
        "@typescript-eslint/no-unsafe-assignment": "off", // Unsafe assignment of an `any` value
        "@typescript-eslint/no-unsafe-call": "off", // Unsafe call of an `any` (or `error`) typed value
        "@typescript-eslint/member-ordering": "off", // public before private (vars and methods)
        "@typescript-eslint/no-unsafe-argument": "off" // E.g. Unsafe argument of type `any` assigned to a parameter of type `string`
      }
    },
    {
      "files": [
        "*.html"
      ],
      "plugins": [
        "@angular-eslint/eslint-plugin-template"
      ],
      "parser": "@angular-eslint/template-parser",
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "rules": {
        "@angular-eslint/template/banana-in-box": "error",
        "@angular-eslint/template/no-negated-async": "warn",
        "eqeqeq": "error"
      }
    }
  ]
}
